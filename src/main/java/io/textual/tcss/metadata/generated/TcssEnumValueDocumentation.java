package io.textual.tcss.metadata.generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;

/**
 * Generated by Gradle task 'generateTcssDocumentation' - DO NOT EDIT MANUALLY
 * <p>
 * Enum value descriptions extracted from Textual documentation markdown files.
 */
public final class TcssEnumValueDocumentation {
    private static final Map<String, Map<String, String>> PROPERTY_VALUE_DESCRIPTIONS;

    static {
        Map<String, Map<String, String>> map = new LinkedHashMap<>();

        // box-sizing
        Map<String, String> box_sizing = new LinkedHashMap<>();
        box_sizing.put("border-box", "Padding and border are included in the width and height. If you add padding and/or border the widget will not change in size, but you will have less space for content.");
        box_sizing.put("content-box", "Padding and border will increase the size of the widget, leaving the content area unaffected.");
        map.put("box-sizing", box_sizing);

        // display
        Map<String, String> display = new LinkedHashMap<>();
        display.put("block", "Display the widget as normal.");
        display.put("none", "The widget is not displayed and space will no longer be reserved for it.");
        map.put("display", display);

        // layout
        Map<String, String> layout = new LinkedHashMap<>();
        layout.put("grid", "Child widgets will be arranged in a grid.");
        layout.put("horizontal", "Child widgets will be arranged along the horizontal axis, from left to right.");
        layout.put("vertical", "Child widgets will be arranged along the vertical axis, from top to bottom.");
        map.put("layout", layout);

        // scrollbar-gutter
        Map<String, String> scrollbar_gutter = new LinkedHashMap<>();
        scrollbar_gutter.put("auto", "No space is reserved for a vertical scrollbar.");
        scrollbar_gutter.put("stable", "Space is reserved for a vertical scrollbar.");
        map.put("scrollbar-gutter", scrollbar_gutter);

        // scrollbar-visibility
        Map<String, String> scrollbar_visibility = new LinkedHashMap<>();
        scrollbar_visibility.put("hidden", "The widget's scrollbars will be hidden.");
        scrollbar_visibility.put("visible", "The widget's scrollbars will be displayed as normal.");
        map.put("scrollbar-visibility", scrollbar_visibility);

        // text-overflow
        Map<String, String> text_overflow = new LinkedHashMap<>();
        text_overflow.put("clip", "Overflowing text will be clipped (the overflow portion is removed from the output).");
        text_overflow.put("fold", "Overflowing text will fold on to the next line(s).");
        text_overflow.put("ellipsis", "Overflowing text will be truncated and the last visible character will be replaced with an ellipsis.");
        map.put("text-overflow", text_overflow);

        // visibility
        Map<String, String> visibility = new LinkedHashMap<>();
        visibility.put("hidden", "The widget will be invisible.");
        visibility.put("visible", "The widget will be displayed as normal.");
        map.put("visibility", visibility);

        PROPERTY_VALUE_DESCRIPTIONS = Collections.unmodifiableMap(map);
    }

    private TcssEnumValueDocumentation() {
        // Utility class
    }

    /**
     * Gets the description for a specific enum value of a property.
     *
     * @param property the property name (e.g., "display", "text-overflow")
     * @param value the enum value (e.g., "block", "ellipsis")
     * @return the description, or null if not found
     */
    @Nullable
    public static String getDescription(@NotNull String property, @NotNull String value) {
        Map<String, String> propertyMap = PROPERTY_VALUE_DESCRIPTIONS.get(property.toLowerCase(Locale.US));
        return propertyMap != null ? propertyMap.get(value.toLowerCase(Locale.US)) : null;
    }

    /**
     * Gets all value descriptions for a property.
     *
     * @param property the property name
     * @return map of value to description, or empty map if not found
     */
    @NotNull
    public static Map<String, String> getValueDescriptions(@NotNull String property) {
        Map<String, String> descriptions = PROPERTY_VALUE_DESCRIPTIONS.get(property.toLowerCase(Locale.US));
        return descriptions != null ? descriptions : Collections.emptyMap();
    }
}
