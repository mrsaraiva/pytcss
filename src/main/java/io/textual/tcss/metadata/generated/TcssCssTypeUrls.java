package io.textual.tcss.metadata.generated;

import org.jetbrains.annotations.Nullable;

import java.util.HashMap;
import java.util.Map;

/**
 * Generated by Gradle task 'generateTcssDocumentation' - DO NOT EDIT MANUALLY
 * <p>
 * Maps CSS type names to documentation URLs based on available documentation files.
 */
public final class TcssCssTypeUrls {
    private static final Map<String, String> TYPE_TO_URL;

    static {
        TYPE_TO_URL = new HashMap<>();
        TYPE_TO_URL.put("-template", "https://textual.textualize.io/css_types/-template/");
        TYPE_TO_URL.put("border", "https://textual.textualize.io/css_types/border/");
        TYPE_TO_URL.put("color", "https://textual.textualize.io/css_types/color/");
        TYPE_TO_URL.put("hatch", "https://textual.textualize.io/css_types/hatch/");
        TYPE_TO_URL.put("horizontal", "https://textual.textualize.io/css_types/horizontal/");
        TYPE_TO_URL.put("index", "https://textual.textualize.io/css_types/index/");
        TYPE_TO_URL.put("integer", "https://textual.textualize.io/css_types/integer/");
        TYPE_TO_URL.put("keyline", "https://textual.textualize.io/css_types/keyline/");
        TYPE_TO_URL.put("name", "https://textual.textualize.io/css_types/name/");
        TYPE_TO_URL.put("number", "https://textual.textualize.io/css_types/number/");
        TYPE_TO_URL.put("overflow", "https://textual.textualize.io/css_types/overflow/");
        TYPE_TO_URL.put("percentage", "https://textual.textualize.io/css_types/percentage/");
        TYPE_TO_URL.put("position", "https://textual.textualize.io/css_types/position/");
        TYPE_TO_URL.put("scalar", "https://textual.textualize.io/css_types/scalar/");
        TYPE_TO_URL.put("text-align", "https://textual.textualize.io/css_types/text-align/");
        TYPE_TO_URL.put("text-style", "https://textual.textualize.io/css_types/text-style/");
        TYPE_TO_URL.put("vertical", "https://textual.textualize.io/css_types/vertical/");
    }

    private TcssCssTypeUrls() {
        // Utility class
    }

    /**
     * Gets the documentation URL for a CSS type.
     *
     * @param typeName the CSS type name (e.g., "color", "scalar", "border")
     * @return the documentation URL, or null if type has no documentation
     */
    @Nullable
    public static String getTypeUrl(String typeName) {
        return TYPE_TO_URL.get(typeName);
    }
}
