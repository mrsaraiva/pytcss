package org.msaraiva.pytcss.metadata.generated;

import java.util.HashMap;
import java.util.Map;
import org.jetbrains.annotations.Nullable;

/**
 * Generated by Gradle task 'generateTcssDocumentation' - DO NOT EDIT MANUALLY
 * <p>
 * Maps property filenames (with underscores) to their relative paths for documentation URLs.
 * Used to generate correct documentation links including subdirectory structure.
 */
public final class TcssAvailableProperties {
    private static final Map<String, String> PROPERTY_PATHS;

    static {
        PROPERTY_PATHS = new HashMap<>();
        PROPERTY_PATHS.put("align", "styles/align");
        PROPERTY_PATHS.put("background", "styles/background");
        PROPERTY_PATHS.put("background_tint", "styles/background_tint");
        PROPERTY_PATHS.put("border", "styles/border");
        PROPERTY_PATHS.put("border_subtitle_align", "styles/border_subtitle_align");
        PROPERTY_PATHS.put("border_subtitle_background", "styles/border_subtitle_background");
        PROPERTY_PATHS.put("border_subtitle_color", "styles/border_subtitle_color");
        PROPERTY_PATHS.put("border_subtitle_style", "styles/border_subtitle_style");
        PROPERTY_PATHS.put("border_title_align", "styles/border_title_align");
        PROPERTY_PATHS.put("border_title_background", "styles/border_title_background");
        PROPERTY_PATHS.put("border_title_color", "styles/border_title_color");
        PROPERTY_PATHS.put("border_title_style", "styles/border_title_style");
        PROPERTY_PATHS.put("box_sizing", "styles/box_sizing");
        PROPERTY_PATHS.put("color", "styles/color");
        PROPERTY_PATHS.put("column_span", "styles/grid/column_span");
        PROPERTY_PATHS.put("content_align", "styles/content_align");
        PROPERTY_PATHS.put("display", "styles/display");
        PROPERTY_PATHS.put("dock", "styles/dock");
        PROPERTY_PATHS.put("grid_columns", "styles/grid/grid_columns");
        PROPERTY_PATHS.put("grid_gutter", "styles/grid/grid_gutter");
        PROPERTY_PATHS.put("grid_rows", "styles/grid/grid_rows");
        PROPERTY_PATHS.put("grid_size", "styles/grid/grid_size");
        PROPERTY_PATHS.put("hatch", "styles/hatch");
        PROPERTY_PATHS.put("height", "styles/height");
        PROPERTY_PATHS.put("keyline", "styles/keyline");
        PROPERTY_PATHS.put("layer", "styles/layer");
        PROPERTY_PATHS.put("layers", "styles/layers");
        PROPERTY_PATHS.put("layout", "styles/layout");
        PROPERTY_PATHS.put("link_background", "styles/links/link_background");
        PROPERTY_PATHS.put("link_background_hover", "styles/links/link_background_hover");
        PROPERTY_PATHS.put("link_color", "styles/links/link_color");
        PROPERTY_PATHS.put("link_color_hover", "styles/links/link_color_hover");
        PROPERTY_PATHS.put("link_style", "styles/links/link_style");
        PROPERTY_PATHS.put("link_style_hover", "styles/links/link_style_hover");
        PROPERTY_PATHS.put("margin", "styles/margin");
        PROPERTY_PATHS.put("max_height", "styles/max_height");
        PROPERTY_PATHS.put("max_width", "styles/max_width");
        PROPERTY_PATHS.put("min_height", "styles/min_height");
        PROPERTY_PATHS.put("min_width", "styles/min_width");
        PROPERTY_PATHS.put("offset", "styles/offset");
        PROPERTY_PATHS.put("opacity", "styles/opacity");
        PROPERTY_PATHS.put("outline", "styles/outline");
        PROPERTY_PATHS.put("overflow", "styles/overflow");
        PROPERTY_PATHS.put("padding", "styles/padding");
        PROPERTY_PATHS.put("position", "styles/position");
        PROPERTY_PATHS.put("row_span", "styles/grid/row_span");
        PROPERTY_PATHS.put("scrollbar_background", "styles/scrollbar_colors/scrollbar_background");
        PROPERTY_PATHS.put("scrollbar_background_active", "styles/scrollbar_colors/scrollbar_background_active");
        PROPERTY_PATHS.put("scrollbar_background_hover", "styles/scrollbar_colors/scrollbar_background_hover");
        PROPERTY_PATHS.put("scrollbar_color", "styles/scrollbar_colors/scrollbar_color");
        PROPERTY_PATHS.put("scrollbar_color_active", "styles/scrollbar_colors/scrollbar_color_active");
        PROPERTY_PATHS.put("scrollbar_color_hover", "styles/scrollbar_colors/scrollbar_color_hover");
        PROPERTY_PATHS.put("scrollbar_corner_color", "styles/scrollbar_colors/scrollbar_corner_color");
        PROPERTY_PATHS.put("scrollbar_gutter", "styles/scrollbar_gutter");
        PROPERTY_PATHS.put("scrollbar_size", "styles/scrollbar_size");
        PROPERTY_PATHS.put("scrollbar_visibility", "styles/scrollbar_visibility");
        PROPERTY_PATHS.put("text_align", "styles/text_align");
        PROPERTY_PATHS.put("text_opacity", "styles/text_opacity");
        PROPERTY_PATHS.put("text_overflow", "styles/text_overflow");
        PROPERTY_PATHS.put("text_style", "styles/text_style");
        PROPERTY_PATHS.put("text_wrap", "styles/text_wrap");
        PROPERTY_PATHS.put("tint", "styles/tint");
        PROPERTY_PATHS.put("visibility", "styles/visibility");
        PROPERTY_PATHS.put("width", "styles/width");
    }

    private TcssAvailableProperties() {
        // Utility class
    }

    /**
     * Checks if a property filename has documentation.
     *
     * @param fileName the property filename (with underscores, e.g., "box_sizing")
     * @return true if documentation exists for this property
     */
    public static boolean hasDocumentation(String fileName) {
        return PROPERTY_PATHS.containsKey(fileName);
    }

    /**
     * Gets the relative path for a property's documentation.
     *
     * @param fileName the property filename (with underscores, e.g., "grid_columns")
     * @return the relative path (e.g., "styles/grid/grid_columns"), or null if no documentation
     */
    @Nullable
    public static String getRelativePath(String fileName) {
        return PROPERTY_PATHS.get(fileName);
    }
}
