package org.msaraiva.pytcss.metadata.generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Map;

/**
 * Generated by Gradle task 'generateTcssDocumentation' - DO NOT EDIT MANUALLY
 * <p>
 * Property documentation extracted from Textual documentation markdown files.
 * Includes: enum value descriptions, syntax, CSS examples, Python examples, and related properties.
 */
public final class TcssPropertyDocumentation {
    private static final Map<String, Map<String, String>> ENUM_VALUE_DESCRIPTIONS;
    private static final Map<String, String> SYNTAX;
    private static final Map<String, String> CSS_EXAMPLES;
    private static final Map<String, String> PYTHON_EXAMPLES;
    private static final Map<String, List<String>> SEE_ALSO;

    static {
        // Enum value descriptions
        Map<String, Map<String, String>> enumMap = new LinkedHashMap<>();
        // box-sizing enum values
        Map<String, String> box_sizing_enum = new LinkedHashMap<>();
        box_sizing_enum.put("border-box", "Padding and border are included in the width and height. If you add padding and/or border the widget will not change in size, but you will have less space for content.");
        box_sizing_enum.put("content-box", "Padding and border will increase the size of the widget, leaving the content area unaffected.");
        enumMap.put("box-sizing", box_sizing_enum);
        // display enum values
        Map<String, String> display_enum = new LinkedHashMap<>();
        display_enum.put("block", "Display the widget as normal.");
        display_enum.put("none", "The widget is not displayed and space will no longer be reserved for it.");
        enumMap.put("display", display_enum);
        // layout enum values
        Map<String, String> layout_enum = new LinkedHashMap<>();
        layout_enum.put("grid", "Child widgets will be arranged in a grid.");
        layout_enum.put("horizontal", "Child widgets will be arranged along the horizontal axis, from left to right.");
        layout_enum.put("vertical", "Child widgets will be arranged along the vertical axis, from top to bottom.");
        enumMap.put("layout", layout_enum);
        // scrollbar-gutter enum values
        Map<String, String> scrollbar_gutter_enum = new LinkedHashMap<>();
        scrollbar_gutter_enum.put("auto", "No space is reserved for a vertical scrollbar.");
        scrollbar_gutter_enum.put("stable", "Space is reserved for a vertical scrollbar.");
        enumMap.put("scrollbar-gutter", scrollbar_gutter_enum);
        // scrollbar-visibility enum values
        Map<String, String> scrollbar_visibility_enum = new LinkedHashMap<>();
        scrollbar_visibility_enum.put("hidden", "The widget's scrollbars will be hidden.");
        scrollbar_visibility_enum.put("visible", "The widget's scrollbars will be displayed as normal.");
        enumMap.put("scrollbar-visibility", scrollbar_visibility_enum);
        // text-overflow enum values
        Map<String, String> text_overflow_enum = new LinkedHashMap<>();
        text_overflow_enum.put("clip", "Overflowing text will be clipped (the overflow portion is removed from the output).");
        text_overflow_enum.put("fold", "Overflowing text will fold on to the next line(s).");
        text_overflow_enum.put("ellipsis", "Overflowing text will be truncated and the last visible character will be replaced with an ellipsis.");
        enumMap.put("text-overflow", text_overflow_enum);
        // visibility enum values
        Map<String, String> visibility_enum = new LinkedHashMap<>();
        visibility_enum.put("hidden", "The widget will be invisible.");
        visibility_enum.put("visible", "The widget will be displayed as normal.");
        enumMap.put("visibility", visibility_enum);
        ENUM_VALUE_DESCRIPTIONS = Collections.unmodifiableMap(enumMap);

        // Syntax definitions
        Map<String, String> syntaxMap = new LinkedHashMap<>();
        syntaxMap.put("align", "align: &lt;horizontal&gt; &lt;vertical&gt;;\r\n\r\nalign-horizontal: &lt;horizontal&gt;;\r\nalign-vertical: &lt;vertical&gt;;\r\n\r\nThe `align` style takes a <a href=\"https://textual.textualize.io/css_types/horizontal/\"><horizontal></a> followed by a <a href=\"https://textual.textualize.io/css_types/vertical/\"><vertical></a>.\r\n\r\nYou can also set the alignment for each axis individually with `align-horizontal` and `align-vertical`.");
        syntaxMap.put("background", "background: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nThe `background` style requires a <a href=\"https://textual.textualize.io/css_types/color/\"><color></a> optionally followed by <a href=\"https://textual.textualize.io/css_types/percentage/\"><percentage></a> to specify the color's opacity (clamped between `0%` and `100%`).");
        syntaxMap.put("background-tint", "background-tint: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nThe `background-tint` style requires a <a href=\"https://textual.textualize.io/css_types/color/\"><color></a> optionally followed by <a href=\"https://textual.textualize.io/css_types/percentage/\"><percentage></a> to specify the color's opacity (clamped between `0%` and `100%`).");
        syntaxMap.put("border", "border: [&lt;border&gt;] [&lt;color&gt;] [&lt;percentage&gt;];\r\n\r\nborder-top: [&lt;border&gt;] [&lt;color&gt;] [&lt;percentage&gt;];\r\nborder-right: [&lt;border&gt;] [&lt;color&gt; [&lt;percentage&gt;]];\r\nborder-bottom: [&lt;border&gt;] [&lt;color&gt; [&lt;percentage&gt;]];\r\nborder-left: [&lt;border&gt;] [&lt;color&gt; [&lt;percentage&gt;]];\r\n\r\nIn CSS, the border is set with a [border style](./border.md) and a color. Both are optional. An optional percentage may be added to blend the border with the background color.\r\n\r\nIn Python, the border is set with a tuple of [border style](./border.md) and a color.");
        syntaxMap.put("border-subtitle-align", "border-subtitle-align: &lt;horizontal&gt;;\r\n\r\nThe `border-subtitle-align` style takes a <a href=\"https://textual.textualize.io/css_types/horizontal/\"><horizontal></a> that determines where the border subtitle is aligned along the top edge of the border.\r\nThis means that the border corners are always visible.");
        syntaxMap.put("border-subtitle-background", "border-subtitle-background: (&lt;color&gt; | auto) [&lt;percentage&gt;];");
        syntaxMap.put("border-subtitle-color", "border-subtitle-color: (&lt;color&gt; | auto) [&lt;percentage&gt;];");
        syntaxMap.put("border-subtitle-style", "border-subtitle-style: &lt;text-style&gt;;");
        syntaxMap.put("border-title-align", "border-title-align: &lt;horizontal&gt;;\r\n\r\nThe `border-title-align` style takes a <a href=\"https://textual.textualize.io/css_types/horizontal/\"><horizontal></a> that determines where the border title is aligned along the top edge of the border.\r\nThis means that the border corners are always visible.");
        syntaxMap.put("border-title-background", "border-title-background: (&lt;color&gt; | auto) [&lt;percentage&gt;];");
        syntaxMap.put("border-title-color", "border-title-color: (&lt;color&gt; | auto) [&lt;percentage&gt;];");
        syntaxMap.put("border-title-style", "border-title-style: &lt;text-style&gt;;");
        syntaxMap.put("box-sizing", "box-sizing: border-box | content-box;");
        syntaxMap.put("color", "color: (&lt;color&gt; | auto) [&lt;percentage&gt;];\r\n\r\nThe `color` style requires a <a href=\"https://textual.textualize.io/css_types/color/\"><color></a> followed by an optional <a href=\"https://textual.textualize.io/css_types/percentage/\"><percentage></a> to specify the color's opacity.\r\n\r\nYou can also use the special value of `\"auto\"` in place of a color. This tells Textual to automatically select either white or black text for best contrast against the background.");
        syntaxMap.put("content-align", "content-align: &lt;horizontal&gt; &lt;vertical&gt;;\r\n\r\ncontent-align-horizontal: &lt;horizontal&gt;;\r\ncontent-align-vertical: &lt;vertical&gt;;\r\n\r\nThe `content-align` style takes a <a href=\"https://textual.textualize.io/css_types/horizontal/\"><horizontal></a> followed by a <a href=\"https://textual.textualize.io/css_types/vertical/\"><vertical></a>.\r\n\r\nYou can specify the alignment of content on both the horizontal and vertical axes at the same time,\r\nor on each of the axis separately.\r\nTo specify content alignment on a single axis, use the respective style and type:\r\n\r\n - `content-align-horizontal` takes a <a href=\"https://textual.textualize.io/css_types/horizontal/\"><horizontal></a> and does alignment along the horizontal axis; and\r\n - `content-align-vertical` takes a <a href=\"https://textual.textualize.io/css_types/vertical/\"><vertical></a> and does alignment along the vertical axis.");
        syntaxMap.put("display", "display: block | none;");
        syntaxMap.put("dock", "dock: bottom | left | right | top;\r\n\r\n\r\nThe option chosen determines the edge to which the widget is docked.");
        syntaxMap.put("column-span", "column-span: &lt;integer&gt;;\r\n\r\nThe `column-span` style accepts a single non-negative [`<integer>`](../../css_types/integer.md) that quantifies how many columns the given widget spans.");
        syntaxMap.put("grid-columns", "grid-columns: &lt;scalar&gt;+;\r\n\r\nThe `grid-columns` style takes one or more [`<scalar>`](../../css_types/scalar.md) that specify the length of the columns of the grid.\r\n\r\nIf there are more columns in the grid than scalars specified in `grid-columns`, they are reused cyclically.\r\nIf the number of [`<scalar>`](../../css_types/scalar.md) is in excess, the excess is ignored.");
        syntaxMap.put("grid-gutter", "grid-gutter: &lt;integer&gt; [&lt;integer&gt;];\r\n\r\nThe `grid-gutter` style takes one or two [`<integer>`](../../css_types/integer.md) that set the length of the gutter along the vertical and horizontal axes.\r\nIf only one [`<integer>`](../../css_types/integer.md) is supplied, it sets the vertical and horizontal gutters.\r\nIf two are supplied, they set the vertical and horizontal gutters, respectively.");
        syntaxMap.put("grid-rows", "grid-rows: &lt;scalar&gt;+;\r\n\r\nThe `grid-rows` style takes one or more [`<scalar>`](../../css_types/scalar.md) that specify the length of the rows of the grid.\r\n\r\nIf there are more rows in the grid than scalars specified in `grid-rows`, they are reused cyclically.\r\nIf the number of [`<scalar>`](../../css_types/scalar.md) is in excess, the excess is ignored.");
        syntaxMap.put("grid-size", "grid-size: &lt;integer&gt; [&lt;integer&gt;];\r\n\r\nThe `grid-size` style takes one or two non-negative [`<integer>`](../../css_types/integer.md).\r\nThe first defines how many columns there are in the grid.\r\nIf present, the second one sets the number of rows – regardless of the number of children of the grid –, otherwise the number of rows is computed automatically.");
        syntaxMap.put("index", "scrollbar-background: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nscrollbar-background-active: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nscrollbar-background-hover: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nscrollbar-color: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nscrollbar-color-active: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nscrollbar-color-hover: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nscrollbar-corner-color: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nVisit each style's reference page to learn more about how the values are used.");
        syntaxMap.put("row-span", "row-span: &lt;integer&gt;;\r\n\r\nThe `row-span` style accepts a single non-negative [`<integer>`](../../css_types/integer.md) that quantifies how many rows the given widget spans.");
        syntaxMap.put("hatch", "hatch: (&lt;hatch&gt; | CHARACTER) &lt;color&gt; [&lt;percentage&gt;]\r\n\r\nThe hatch type can be specified with a constant, or a string. For example, `cross` for cross hatch, or `\"T\"` for a custom character.\r\n\r\nThe color can be any Textual color value.\r\n\r\nAn optional percentage can be used to set the opacity.");
        syntaxMap.put("height", "height: &lt;scalar&gt;;\r\n\r\nThe `height` style needs a <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> to determine the vertical length of the widget.\r\nBy default, it sets the height of the content area, but if <a href=\"https://textual.textualize.io/styles/box_sizing/\">box-sizing</a> is set to `border-box` it sets the height of the border area.");
        syntaxMap.put("keyline", "keyline: [&lt;keyline&gt;] [&lt;color&gt;];");
        syntaxMap.put("layer", "layer: &lt;name&gt;;\r\n\r\nThe `layer` style accepts a <a href=\"https://textual.textualize.io/css_types/name/\"><name></a> that defines the layer this widget belongs to.\r\nThis <a href=\"https://textual.textualize.io/css_types/name/\"><name></a> must correspond to a <a href=\"https://textual.textualize.io/css_types/name/\"><name></a> that has been defined in a <a href=\"https://textual.textualize.io/styles/layers/\">layers</a> style by an ancestor of this widget.\r\n\r\nMore information on layers can be found in the [guide](../guide/layout.md#layers).\r\n\r\n!!! warning\r\n\r\n    Using a `<name>` that hasn't been defined in a <a href=\"https://textual.textualize.io/styles/layers/\">layers</a> declaration of an ancestor of this widget has no effect.");
        syntaxMap.put("layers", "layers: &lt;name&gt;+;\r\n\r\nThe `layers` style accepts one or more <a href=\"https://textual.textualize.io/css_types/name/\"><name></a> that define the layers that the widget is aware of, and the order in which they will be painted on the screen.\r\n\r\nThe values used here can later be referenced using the <a href=\"https://textual.textualize.io/styles/layer/\">layer</a> property.\r\nThe layers defined first in the list are drawn under the layers that are defined later in the list.\r\n\r\nMore information on layers can be found in the [guide](../guide/layout.md#layers).");
        syntaxMap.put("layout", "layout: grid | horizontal | vertical;\r\n\r\nThe `layout` style takes an option that defines how child widgets will be arranged, as per the table shown below.");
        syntaxMap.put("link-background", "link-background: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`link-background` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the background color of text enclosed in Textual action links.");
        syntaxMap.put("link-background-hover", "link-background-hover: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`link-background-hover` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the background color of text enclosed in Textual action links when the mouse pointer is over it.");
        syntaxMap.put("link-color", "link-color: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`link-color` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the color of text enclosed in Textual action links.");
        syntaxMap.put("link-color-hover", "link-color-hover: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`link-color-hover` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the color of text enclosed in Textual action links when the mouse pointer is over it.");
        syntaxMap.put("link-style", "link-style: &lt;text-style&gt;;\r\n\r\n`link-style` will take all the values specified and will apply that styling to text that is enclosed by a Textual action link.");
        syntaxMap.put("link-style-hover", "link-style-hover: &lt;text-style&gt;;\r\n\r\n`link-style-hover` applies its [`<text-style>`](../../css_types/text_style.md) to the text of Textual action links when the mouse pointer is over them.");
        syntaxMap.put("margin", "margin: &lt;integer&gt;\r\n      # one value for all edges\r\n      | &lt;integer&gt; &lt;integer&gt;\r\n      # top/bot   left/right\r\n      | &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;;\r\n      # top       right     bot       left\r\n\r\nmargin-top: &lt;integer&gt;;\r\nmargin-right: &lt;integer&gt;;\r\nmargin-bottom: &lt;integer&gt;;\r\nmargin-left: &lt;integer&gt;;\r\n\r\nThe `margin` specifies spacing around the four edges of the widget equal to the <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> specified.\r\nThe number of values given defines what edges get what margin:\r\n\r\n - 1 <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> sets the same margin for the four edges of the widget;\r\n - 2 <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> set margin for top/bottom and left/right edges, respectively.\r\n - 4 <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> set margin for the top, right, bottom, and left edges, respectively.\r\n\r\n!!! tip\r\n\r\n    To remember the order of the edges affected by the rule `margin` when it has 4 values, think of a clock.\r\n    Its hand starts at the top and the goes clockwise: top, right, bottom, left.\r\n\r\nAlternatively, margin can be set for each edge individually through the styles `margin-top`, `margin-right`, `margin-bottom`, and `margin-left`, respectively.");
        syntaxMap.put("max-height", "max-height: &lt;scalar&gt;;\r\n\r\nThe `max-height` style accepts a <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> that defines an upper bound for the <a href=\"https://textual.textualize.io/styles/height/\">height</a> of a widget.\r\nThat is, the height of a widget is never allowed to exceed `max-height`.");
        syntaxMap.put("max-width", "max-width: &lt;scalar&gt;;\r\n\r\nThe `max-width` style accepts a <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> that defines an upper bound for the <a href=\"https://textual.textualize.io/styles/width/\">width</a> of a widget.\r\nThat is, the width of a widget is never allowed to exceed `max-width`.");
        syntaxMap.put("min-height", "min-height: &lt;scalar&gt;;\r\n\r\nThe `min-height` style accepts a <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> that defines a lower bound for the <a href=\"https://textual.textualize.io/styles/height/\">height</a> of a widget.\r\nThat is, the height of a widget is never allowed to be under `min-height`.");
        syntaxMap.put("min-width", "min-width: &lt;scalar&gt;;\r\n\r\nThe `min-width` style accepts a <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> that defines a lower bound for the <a href=\"https://textual.textualize.io/styles/width/\">width</a> of a widget.\r\nThat is, the width of a widget is never allowed to be under `min-width`.");
        syntaxMap.put("offset", "offset: &lt;scalar&gt; &lt;scalar&gt;;\r\n\r\noffset-x: &lt;scalar&gt;;\r\noffset-y: &lt;scalar&gt;\r\n\r\nThe two <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> in the `offset` define, respectively, the offsets in the horizontal and vertical axes for the widget.\r\n\r\nTo specify an offset along a single axis, you can use `offset-x` and `offset-y`.");
        syntaxMap.put("opacity", "opacity: &lt;number&gt; | &lt;percentage&gt;;\r\n\r\nThe opacity of a widget can be set as a <a href=\"https://textual.textualize.io/css_types/number/\"><number></a> or a <a href=\"https://textual.textualize.io/css_types/percentage/\"><percentage></a>.\r\nIf given as a number, then `opacity` should be a value between 0 and 1, where 0 is the background color and 1 is fully opaque.\r\nIf given as a percentage, 0% is the background color and 100% is fully opaque.\r\n\r\nTypically, if you set this value it would be somewhere between the two extremes.\r\nFor instance, setting the opacity of a widget to `70%` will make it appear dimmer than surrounding widgets, which could be used to display a *disabled* state.");
        syntaxMap.put("outline", "outline: [&lt;border&gt;] [&lt;color&gt;];\r\n\r\noutline-top: [&lt;border&gt;] [&lt;color&gt;];\r\noutline-right: [&lt;border&gt;] [&lt;color&gt;];\r\noutline-bottom: [&lt;border&gt;] [&lt;color&gt;];\r\noutline-left: [&lt;border&gt;] [&lt;color&gt;];\r\n\r\nThe style `outline` accepts an optional <a href=\"https://textual.textualize.io/css_types/border/\"><border></a> that sets the visual style of the widget outline and an optional <a href=\"https://textual.textualize.io/css_types/color/\"><color></a> to set the color of the outline.\r\n\r\nUnlike the style <a href=\"https://textual.textualize.io/styles/border/\">border</a>, the frame of the outline is drawn over the content area of the widget.\r\nThis rule can be useful to add temporary emphasis on the content of a widget, if you want to draw the user's attention to it.");
        syntaxMap.put("overflow", "overflow: &lt;overflow&gt; &lt;overflow&gt;;\r\n\r\noverflow-x: &lt;overflow&gt;;\r\noverflow-y: &lt;overflow&gt;;\r\n\r\nThe style `overflow` accepts two values that determine when to display scrollbars in a container widget.\r\nThe two values set the overflow for the horizontal and vertical axes, respectively.\r\n\r\nOverflow may also be set individually for each axis:\r\n\r\n - `overflow-x` sets the overflow for the horizontal axis; and\r\n - `overflow-y` sets the overflow for the vertical axis.");
        syntaxMap.put("padding", "padding: &lt;integer&gt; # one value for all edges\r\n       | &lt;integer&gt; &lt;integer&gt;\r\n       # top/bot   left/right\r\n       | &lt;integer&gt; &lt;integer&gt; &lt;integer&gt; &lt;integer&gt;;\r\n       # top       right     bot       left\r\n\r\npadding-top: &lt;integer&gt;;\r\npadding-right: &lt;integer&gt;;\r\npadding-bottom: &lt;integer&gt;;\r\npadding-left: &lt;integer&gt;;\r\n\r\nThe `padding` specifies spacing around the _content_ of a widget, thus this spacing is added _inside_ the widget.\r\nThe values of the <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> determine how much spacing is added and the number of values define what edges get what padding:\r\n\r\n - 1 <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> sets the same padding for the four edges of the widget;\r\n - 2 <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> set padding for top/bottom and left/right edges, respectively.\r\n - 4 <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> set padding for the top, right, bottom, and left edges, respectively.\r\n\r\n!!! tip\r\n\r\n    To remember the order of the edges affected by the rule `padding` when it has 4 values, think of a clock.\r\n    Its hand starts at the top and then goes clockwise: top, right, bottom, left.\r\n\r\nAlternatively, padding can be set for each edge individually through the rules `padding-top`, `padding-right`, `padding-bottom`, and `padding-left`, respectively.");
        syntaxMap.put("position", "position: &lt;position&gt;;");
        syntaxMap.put("scrollbar-background", "scrollbar-background: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-background` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the background color of a scrollbar.");
        syntaxMap.put("scrollbar-background-active", "scrollbar-background-active: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-background-active` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the background color of a scrollbar when its thumb is being dragged.");
        syntaxMap.put("scrollbar-background-hover", "scrollbar-background-hover: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-background-hover` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the background color of a scrollbar when the cursor is over it.");
        syntaxMap.put("scrollbar-color", "scrollbar-color: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-color` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the color of a scrollbar.");
        syntaxMap.put("scrollbar-color-active", "scrollbar-color-active: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-color-active` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the color of a scrollbar when its thumb is being dragged.");
        syntaxMap.put("scrollbar-color-hover", "scrollbar-color-hover: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-color-hover` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the color of a scrollbar when the cursor is over it.");
        syntaxMap.put("scrollbar-corner-color", "scrollbar-corner-color: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\n`scrollbar-corner-color` accepts a [`<color>`](../../css_types/color.md) (with an optional opacity level defined by a [`<percentage>`](../../css_types/percentage.md)) that is used to define the color of the gap between the horizontal and vertical scrollbars of a widget.");
        syntaxMap.put("scrollbar-gutter", "scrollbar-gutter: auto | stable;");
        syntaxMap.put("scrollbar-size", "scrollbar-size: &lt;integer&gt; &lt;integer&gt;;\r\n              # horizontal vertical\r\n\r\nscrollbar-size-horizontal: &lt;integer&gt;;\r\nscrollbar-size-vertical: &lt;integer&gt;;\r\n\r\nThe `scrollbar-size` style takes two <a href=\"https://textual.textualize.io/css_types/integer/\"><integer></a> to set the horizontal and vertical scrollbar sizes, respectively.\r\nThis customisable size is the width of the scrollbar, given that its length will always be 100% of the container.\r\n\r\nThe scrollbar widths may also be set individually with `scrollbar-size-horizontal` and `scrollbar-size-vertical`.");
        syntaxMap.put("scrollbar-visibility", "scrollbar-visibility: hidden | visible;");
        syntaxMap.put("text-align", "text-align: &lt;text-align&gt;;\r\n\r\nThe `text-align` style accepts a value of the type <a href=\"https://textual.textualize.io/css_types/text-align/\"><text-align></a> that defines how text is aligned inside the widget.");
        syntaxMap.put("text-opacity", "text-opacity: &lt;number&gt; | &lt;percentage&gt;;\r\n\r\n\r\nThe text opacity of a widget can be set as a <a href=\"https://textual.textualize.io/css_types/number/\"><number></a> or a <a href=\"https://textual.textualize.io/css_types/percentage/\"><percentage></a>.\r\nIf given as a number, then `text-opacity` should be a value between 0 and 1, where 0 makes the foreground color match the background (effectively making text invisible) and 1 will display text as normal.\r\nIf given as a percentage, 0% will result in invisible text, and 100% will display fully opaque text.\r\n\r\nTypically, if you set this value it would be somewhere between the two extremes.\r\nFor instance, setting `text-opacity` to `70%` would result in slightly faded text. Setting it to `0.3` would result in very dim text.\r\n\r\n!!! warning\r\n\r\n    Be careful not to set text opacity so low as to make it hard to read.");
        syntaxMap.put("text-overflow", "text-overflow: clip | fold | ellipsis;");
        syntaxMap.put("text-style", "text-style: &lt;text-style&gt;;\r\n\r\n`text-style` will take all the values specified and will apply that styling combination to the text in the widget.");
        syntaxMap.put("text-wrap", "text-wrap: wrap | nowrap;");
        syntaxMap.put("tint", "tint: &lt;color&gt; [&lt;percentage&gt;];\r\n\r\nThe tint style blends a <a href=\"https://textual.textualize.io/css_types/color/\"><color></a> with the widget. The color should likely have an _alpha_ component (specified directly in the color used or by the optional <a href=\"https://textual.textualize.io/css_types/percentage/\"><percentage></a>), otherwise the end result will obscure the widget content.");
        syntaxMap.put("visibility", "visibility: hidden | visible;\r\n\r\n`visibility` takes one of two values to set the visibility of a widget.");
        syntaxMap.put("width", "width: &lt;scalar&gt;;\r\n\r\nThe style `width` needs a <a href=\"https://textual.textualize.io/css_types/scalar/\"><scalar></a> to determine the horizontal length of the width.\r\nBy default, it sets the width of the content area, but if <a href=\"https://textual.textualize.io/styles/box_sizing/\">box-sizing</a> is set to `border-box` it sets the width of the border area.");
        syntaxMap.put("-template", "<!--\r\nFormal syntax description of the style\r\nstyle-name: &lt;type-one&gt;;\r\n-->\r\n\r\n<!-- Description of what the style uses the types/values for. -->");
        SYNTAX = Collections.unmodifiableMap(syntaxMap);

        // CSS examples
        Map<String, String> cssMap = new LinkedHashMap<>();
        cssMap.put("align", "/* Align child widgets to the center. */\r\nalign: center middle;\r\n/* Align child widget to the top right */\r\nalign: right top;\r\n\r\n/* Change the horizontal alignment of the children of a widget */\r\nalign-horizontal: right;\r\n/* Change the vertical alignment of the children of a widget */\r\nalign-vertical: middle;");
        cssMap.put("background", "/* Blue background */\r\nbackground: blue;\r\n\r\n/* 20% red background */\r\nbackground: red 20%;\r\n\r\n/* RGB color */\r\nbackground: rgb(100, 120, 200);\r\n\r\n/* HSL color */\r\nbackground: hsl(290, 70%, 80%);");
        cssMap.put("background-tint", "/* 10% backgrouhnd tint */\r\nbackground-tint: blue 10%;\r\n\r\n\r\n/* 20% RGB color */\r\nbackground-tint: rgb(100, 120, 200, 0.2);");
        cssMap.put("border", "/* Set a heavy white border */\r\nborder: heavy white;\r\n\r\n/* Set a red border on the left */\r\nborder-left: outer red;\r\n\r\n/* Set a rounded orange border, 50% opacity. */\r\nborder: round orange 50%;");
        cssMap.put("border-subtitle-align", "border-subtitle-align: left;\r\nborder-subtitle-align: center;\r\nborder-subtitle-align: right;");
        cssMap.put("border-subtitle-background", "border-subtitle-background: blue;");
        cssMap.put("border-subtitle-color", "border-subtitle-color: red;");
        cssMap.put("border-subtitle-style", "border-subtitle-style: bold underline;");
        cssMap.put("border-title-align", "border-title-align: left;\r\nborder-title-align: center;\r\nborder-title-align: right;");
        cssMap.put("border-title-background", "border-title-background: blue;");
        cssMap.put("border-title-color", "border-title-color: red;");
        cssMap.put("border-title-style", "border-title-style: bold underline;");
        cssMap.put("box-sizing", "/* Set box sizing to border-box (default) */\r\nbox-sizing: border-box;\r\n\r\n/* Set box sizing to content-box */\r\nbox-sizing: content-box;");
        cssMap.put("color", "/* Blue text */\r\ncolor: blue;\r\n\r\n/* 20% red text */\r\ncolor: red 20%;\r\n\r\n/* RGB color */\r\ncolor: rgb(100, 120, 200);\r\n\r\n/* Automatically choose color with suitable contrast for readability */\r\ncolor: auto;");
        cssMap.put("content-align", "/* Align content in the very center of a widget */\r\ncontent-align: center middle;\r\n/* Align content at the top right of a widget */\r\ncontent-align: right top;\r\n\r\n/* Change the horizontal alignment of the content of a widget */\r\ncontent-align-horizontal: right;\r\n/* Change the vertical alignment of the content of a widget */\r\ncontent-align-vertical: middle;");
        cssMap.put("display", "/* Widget is shown */\r\ndisplay: block;\r\n\r\n/* Widget is not shown */\r\ndisplay: none;");
        cssMap.put("dock", "dock: bottom;  /* Docks on the bottom edge of the parent container. */\r\ndock: left;    /* Docks on the   left edge of the parent container. */\r\ndock: right;   /* Docks on the  right edge of the parent container. */\r\ndock: top;     /* Docks on the    top edge of the parent container. */");
        cssMap.put("column-span", "column-span: 3;");
        cssMap.put("grid-columns", "/* Set all columns to have 50% width */\r\ngrid-columns: 50%;\r\n\r\n/* Every other column is twice as wide as the first one */\r\ngrid-columns: 1fr 2fr;");
        cssMap.put("grid-gutter", "/* Set vertical and horizontal gutters to be the same */\r\ngrid-gutter: 5;\r\n\r\n/* Set vertical and horizontal gutters separately */\r\ngrid-gutter: 1 2;");
        cssMap.put("grid-rows", "/* Set all rows to have 50% height */\r\ngrid-rows: 50%;\r\n\r\n/* Every other row is twice as tall as the first one */\r\ngrid-rows: 1fr 2fr;");
        cssMap.put("grid-size", "/* Grid with 3 columns and 5 rows */\r\ngrid-size: 3 5;\r\n\r\n/* Grid with 4 columns and as many rows as needed */\r\ngrid-size: 4;");
        cssMap.put("row-span", "row-span: 3");
        cssMap.put("hatch", "/* Red cross hatch */\r\nhatch: cross red;\r\n/* Right diagonals, 50% transparent green. */\r\nhatch: right green 50%;\r\n/* T custom character in 80% blue. **/\r\nhatch: \"T\" blue 80%;");
        cssMap.put("height", "/* Explicit cell height */\r\nheight: 10;\r\n\r\n/* Percentage height */\r\nheight: 50%;\r\n\r\n/* Automatic height */\r\nheight: auto");
        cssMap.put("keyline", "/* Set a thin green keyline */\r\n/* Note: Must be set on a container or a widget with a layout. */\r\nkeyline: thin green;");
        cssMap.put("layer", "/* Draw the widget on the layer called 'below' */\r\nlayer: below;");
        cssMap.put("layers", "/* Bottom layer is called 'below', layer above it is called 'above' */\r\nlayers: below above;");
        cssMap.put("layout", "layout: horizontal;");
        cssMap.put("link-background", "link-background: red 70%;\r\nlink-background: $accent;");
        cssMap.put("link-background-hover", "link-background-hover: red 70%;\r\nlink-background-hover: $accent;");
        cssMap.put("link-color", "link-color: red 70%;\r\nlink-color: $accent;");
        cssMap.put("link-color-hover", "link-color-hover: red 70%;\r\nlink-color-hover: black;");
        cssMap.put("link-style", "link-style: bold;\r\nlink-style: bold italic reverse;");
        cssMap.put("link-style-hover", "link-style-hover: bold;\r\nlink-style-hover: bold italic reverse;");
        cssMap.put("margin", "/* Set margin of 1 around all edges */\r\nmargin: 1;\r\n/* Set margin of 2 on the top and bottom edges, and 4 on the left and right */\r\nmargin: 2 4;\r\n/* Set margin of 1 on the top, 2 on the right,\r\n                 3 on the bottom, and 4 on the left */\r\nmargin: 1 2 3 4;\r\n\r\nmargin-top: 1;\r\nmargin-right: 2;\r\nmargin-bottom: 3;\r\nmargin-left: 4;");
        cssMap.put("max-height", "/* Set the maximum height to 10 rows */\r\nmax-height: 10;\r\n\r\n/* Set the maximum height to 25% of the viewport height */\r\nmax-height: 25vh;");
        cssMap.put("max-width", "/* Set the maximum width to 10 rows */\r\nmax-width: 10;\r\n\r\n/* Set the maximum width to 25% of the viewport width */\r\nmax-width: 25vw;");
        cssMap.put("min-height", "/* Set the minimum height to 10 rows */\r\nmin-height: 10;\r\n\r\n/* Set the minimum height to 25% of the viewport height */\r\nmin-height: 25vh;");
        cssMap.put("min-width", "/* Set the minimum width to 10 rows */\r\nmin-width: 10;\r\n\r\n/* Set the minimum width to 25% of the viewport width */\r\nmin-width: 25vw;");
        cssMap.put("offset", "/* Move the widget 8 cells in the x direction and 2 in the y direction */\r\noffset: 8 2;\r\n\r\n/* Move the widget 4 cells in the x direction\r\noffset-x: 4;\r\n/* Move the widget -3 cells in the y direction\r\noffset-y: -3;");
        cssMap.put("opacity", "/* Fade the widget to 50% against its parent's background */\r\nopacity: 50%;");
        cssMap.put("outline", "/* Set a heavy white outline */\r\noutline:heavy white;\r\n\r\n/* set a red outline on the left */\r\noutline-left:outer red;");
        cssMap.put("overflow", "/* Automatic scrollbars on both axes (the default) */\r\noverflow: auto auto;\r\n\r\n/* Hide the vertical scrollbar */\r\noverflow-y: hidden;\r\n\r\n/* Always show the horizontal scrollbar */\r\noverflow-x: scroll;");
        cssMap.put("padding", "/* Set padding of 1 around all edges */\r\npadding: 1;\r\n/* Set padding of 2 on the top and bottom edges, and 4 on the left and right */\r\npadding: 2 4;\r\n/* Set padding of 1 on the top, 2 on the right,\r\n                 3 on the bottom, and 4 on the left */\r\npadding: 1 2 3 4;\r\n\r\npadding-top: 1;\r\npadding-right: 2;\r\npadding-bottom: 3;\r\npadding-left: 4;");
        cssMap.put("position", "position: relative;\r\nposition: absolute;");
        cssMap.put("scrollbar-background", "scrollbar-background: blue;");
        cssMap.put("scrollbar-background-active", "scrollbar-background-active: red;");
        cssMap.put("scrollbar-background-hover", "scrollbar-background-hover: purple;");
        cssMap.put("scrollbar-color", "scrollbar-color: cyan;");
        cssMap.put("scrollbar-color-active", "scrollbar-color-active: yellow;");
        cssMap.put("scrollbar-color-hover", "scrollbar-color-hover: pink;");
        cssMap.put("scrollbar-corner-color", "scrollbar-corner-color: white;");
        cssMap.put("scrollbar-gutter", "scrollbar-gutter: auto;    /* Don't reserve space for a vertical scrollbar. */\r\nscrollbar-gutter: stable;  /* Reserve space for a vertical scrollbar. */");
        cssMap.put("scrollbar-size", "/* Set horizontal scrollbar to 10, and vertical scrollbar to 4 */\r\nscrollbar-size: 10 4;\r\n\r\n/* Set horizontal scrollbar to 10 */\r\nscrollbar-size-horizontal: 10;\r\n\r\n/* Set vertical scrollbar to 4 */\r\nscrollbar-size-vertical: 4;");
        cssMap.put("scrollbar-visibility", "scrollbar-visibility: visible;\r\nscrollbar-visibility: hidden;");
        cssMap.put("text-align", "/* Set text in the widget to be right aligned */\r\ntext-align: right;");
        cssMap.put("text-opacity", "/* Set the text to be \"half-faded\" against the background of the widget */\r\ntext-opacity: 50%;");
        cssMap.put("text-overflow", "#widget {\r\n    text-overflow: ellipsis; \r\n}");
        cssMap.put("text-style", "text-style: italic;");
        cssMap.put("text-wrap", "text-wrap: wrap;\r\ntext-wrap: nowrap;");
        cssMap.put("tint", "/* A red tint (could indicate an error) */\r\ntint: red 20%;\r\n\r\n/* A green tint */\r\ntint: rgba(0, 200, 0, 0.3);");
        cssMap.put("visibility", "/* Widget is invisible */\r\nvisibility: hidden;\r\n\r\n/* Widget is visible */\r\nvisibility: visible;");
        cssMap.put("width", "/* Explicit cell width */\r\nwidth: 10;\r\n\r\n/* Percentage width */\r\nwidth: 50%;\r\n\r\n/* Automatic width */\r\nwidth: auto;");
        cssMap.put("-template", "rule-name: value1\r\nrule-name: value2\r\nrule-name: different-syntax-value shown-here\r\n\r\nrule-name-variant: value3\r\nrule-name-variant: value4");
        CSS_EXAMPLES = Collections.unmodifiableMap(cssMap);

        // Python examples
        Map<String, String> pythonMap = new LinkedHashMap<>();
        pythonMap.put("align", "# Align child widgets to the center\r\nwidget.styles.align = (\"center\", \"middle\")\r\n# Align child widgets to the top right\r\nwidget.styles.align = (\"right\", \"top\")\r\n\r\n# Change the horizontal alignment of the children of a widget\r\nwidget.styles.align_horizontal = \"right\"\r\n# Change the vertical alignment of the children of a widget\r\nwidget.styles.align_vertical = \"middle\"");
        pythonMap.put("background", "# Set blue background\r\nwidget.styles.background = \"blue\"\r\n# Set through HSL model\r\nwidget.styles.background = \"hsl(351,32%,89%)\"\r\n\r\nfrom textual.color import Color\r\n# Set with a color object by parsing a string\r\nwidget.styles.background = Color.parse(\"pink\")\r\nwidget.styles.background = Color.parse(\"#FF00FF\")\r\n# Set with a color object instantiated directly\r\nwidget.styles.background = Color(120, 60, 100)");
        pythonMap.put("background-tint", "# Set 20% blue background tint\r\nwidget.styles.background_tint = \"blue 20%\"\r\n\r\nfrom textual.color import Color\r\n# Set with a color object\r\nwidget.styles.background_tint = Color(120, 60, 100, 0.5)");
        pythonMap.put("border", "# Set a heavy white border\r\nwidget.styles.border = (\"heavy\", \"white\")\r\n\r\n# Set a red border on the left\r\nwidget.styles.border_left = (\"outer\", \"red\")");
        pythonMap.put("border-subtitle-align", "widget.styles.border_subtitle_align = \"left\"\r\nwidget.styles.border_subtitle_align = \"center\"\r\nwidget.styles.border_subtitle_align = \"right\"");
        pythonMap.put("border-subtitle-background", "widget.styles.border_subtitle_background = \"blue\"");
        pythonMap.put("border-subtitle-color", "widget.styles.border_subtitle_color = \"red\"");
        pythonMap.put("border-subtitle-style", "widget.styles.border_subtitle_style = \"bold underline\"");
        pythonMap.put("border-title-align", "widget.styles.border_title_align = \"left\"\r\nwidget.styles.border_title_align = \"center\"\r\nwidget.styles.border_title_align = \"right\"");
        pythonMap.put("border-title-background", "widget.styles.border_title_background = \"blue\"");
        pythonMap.put("border-title-color", "widget.styles.border_title_color = \"red\"");
        pythonMap.put("border-title-style", "widget.styles.border_title_style = \"bold underline\"");
        pythonMap.put("box-sizing", "# Set box sizing to border-box (default)\r\nwidget.box_sizing = \"border-box\"\r\n\r\n# Set box sizing to content-box\r\nwidget.box_sizing = \"content-box\"");
        pythonMap.put("color", "# Set blue text\r\nwidget.styles.color = \"blue\"\r\n\r\nfrom textual.color import Color\r\n# Set with a color object\r\nwidget.styles.color = Color.parse(\"pink\")");
        pythonMap.put("content-align", "# Align content in the very center of a widget\r\nwidget.styles.content_align = (\"center\", \"middle\")\r\n# Align content at the top right of a widget\r\nwidget.styles.content_align = (\"right\", \"top\")\r\n\r\n# Change the horizontal alignment of the content of a widget\r\nwidget.styles.content_align_horizontal = \"right\"\r\n# Change the vertical alignment of the content of a widget\r\nwidget.styles.content_align_vertical = \"middle\"");
        pythonMap.put("display", "# Hide the widget\r\nself.styles.display = \"none\"\r\n\r\n# Show the widget again\r\nself.styles.display = \"block\"");
        pythonMap.put("dock", "widget.styles.dock = \"bottom\"  # Dock bottom.\r\nwidget.styles.dock = \"left\"    # Dock   left.\r\nwidget.styles.dock = \"right\"   # Dock  right.\r\nwidget.styles.dock = \"top\"     # Dock    top.");
        pythonMap.put("column-span", "widget.styles.column_span = 3");
        pythonMap.put("grid-columns", "grid.styles.grid_columns = \"50%\"\r\ngrid.styles.grid_columns = \"1fr 2fr\"");
        pythonMap.put("grid-gutter", "widget.styles.grid_gutter_vertical = \"1\"\r\nwidget.styles.grid_gutter_horizontal = \"2\"");
        pythonMap.put("grid-rows", "grid.styles.grid_rows = \"50%\"\r\ngrid.styles.grid_rows = \"1fr 2fr\"");
        pythonMap.put("grid-size", "widget.styles.grid_size_rows = 3\r\nwidget.styles.grid_size_columns = 6");
        pythonMap.put("row-span", "widget.styles.row_span = 3");
        pythonMap.put("hatch", "widget.styles.hatch = (\"cross\", \"red\")\r\nwidget.styles.hatch = (\"right\", \"rgba(0,255,0,128)\")\r\nwidget.styles.hatch = (\"T\", \"blue\")");
        pythonMap.put("height", "self.styles.height = 10  # Explicit cell height can be an int\r\nself.styles.height = \"50%\"\r\nself.styles.height = \"auto\"");
        pythonMap.put("keyline", "widget.styles.keyline = (\"thin\", \"green\")");
        pythonMap.put("layer", "# Draw the widget on the layer called 'below'\r\nwidget.styles.layer = \"below\"");
        pythonMap.put("layers", "# Bottom layer is called 'below', layer above it is called 'above'\r\nwidget.style.layers = (\"below\", \"above\")");
        pythonMap.put("layout", "widget.styles.layout = \"horizontal\"");
        pythonMap.put("link-background", "widget.styles.link_background = \"red 70%\"\r\nwidget.styles.link_background = \"$accent\"\r\n\r\n# You can also use a `Color` object directly:\r\nwidget.styles.link_background = Color(100, 30, 173)");
        pythonMap.put("link-background-hover", "widget.styles.link_background_hover = \"red 70%\"\r\nwidget.styles.link_background_hover = \"$accent\"\r\n\r\n# You can also use a `Color` object directly:\r\nwidget.styles.link_background_hover = Color(100, 30, 173)");
        pythonMap.put("link-color", "widget.styles.link_color = \"red 70%\"\r\nwidget.styles.link_color = \"$accent\"\r\n\r\n# You can also use a `Color` object directly:\r\nwidget.styles.link_color = Color(100, 30, 173)");
        pythonMap.put("link-color-hover", "widget.styles.link_color_hover = \"red 70%\"\r\nwidget.styles.link_color_hover = \"black\"\r\n\r\n# You can also use a `Color` object directly:\r\nwidget.styles.link_color_hover = Color(100, 30, 173)");
        pythonMap.put("link-style", "widget.styles.link_style = \"bold\"\r\nwidget.styles.link_style = \"bold italic reverse\"");
        pythonMap.put("link-style-hover", "widget.styles.link_style_hover = \"bold\"\r\nwidget.styles.link_style_hover = \"bold italic reverse\"");
        pythonMap.put("margin", "# Set margin of 1 around all edges\r\nwidget.styles.margin = 1\r\n# Set margin of 2 on the top and bottom edges, and 4 on the left and right\r\nwidget.styles.margin = (2, 4)\r\n# Set margin of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left\r\nwidget.styles.margin = (1, 2, 3, 4)");
        pythonMap.put("max-height", "# Set the maximum height to 10 rows\r\nwidget.styles.max_height = 10\r\n\r\n# Set the maximum height to 25% of the viewport height\r\nwidget.styles.max_height = \"25vh\"");
        pythonMap.put("max-width", "# Set the maximum width to 10 rows\r\nwidget.styles.max_width = 10\r\n\r\n# Set the maximum width to 25% of the viewport width\r\nwidget.styles.max_width = \"25vw\"");
        pythonMap.put("min-height", "# Set the minimum height to 10 rows\r\nwidget.styles.min_height = 10\r\n\r\n# Set the minimum height to 25% of the viewport height\r\nwidget.styles.min_height = \"25vh\"");
        pythonMap.put("min-width", "# Set the minimum width to 10 rows\r\nwidget.styles.min_width = 10\r\n\r\n# Set the minimum width to 25% of the viewport width\r\nwidget.styles.min_width = \"25vw\"");
        pythonMap.put("offset", "# Move the widget 2 cells in the x direction, and 4 in the y direction.\r\nwidget.styles.offset = (2, 4)");
        pythonMap.put("opacity", "# Fade the widget to 50% against its parent's background\r\nwidget.styles.opacity = \"50%\"");
        pythonMap.put("outline", "# Set a heavy white outline\r\nwidget.outline = (\"heavy\", \"white\")\r\n\r\n# Set a red outline on the left\r\nwidget.outline_left = (\"outer\", \"red\")");
        pythonMap.put("overflow", "# Hide the vertical scrollbar\r\nwidget.styles.overflow_y = \"hidden\"\r\n\r\n# Always show the horizontal scrollbar\r\nwidget.styles.overflow_x = \"scroll\"");
        pythonMap.put("padding", "# Set padding of 1 around all edges\r\nwidget.styles.padding = 1\r\n# Set padding of 2 on the top and bottom edges, and 4 on the left and right\r\nwidget.styles.padding = (2, 4)\r\n# Set padding of 1 on top, 2 on the right, 3 on the bottom, and 4 on the left\r\nwidget.styles.padding = (1, 2, 3, 4)");
        pythonMap.put("position", "widget.styles.position = \"relative\"\r\nwidget.styles.position = \"absolute\"");
        pythonMap.put("scrollbar-background", "widget.styles.scrollbar_background = \"blue\"");
        pythonMap.put("scrollbar-background-active", "widget.styles.scrollbar_background_active = \"red\"");
        pythonMap.put("scrollbar-background-hover", "widget.styles.scrollbar_background_hover = \"purple\"");
        pythonMap.put("scrollbar-color", "widget.styles.scrollbar_color = \"cyan\"");
        pythonMap.put("scrollbar-color-active", "widget.styles.scrollbar_color_active = \"yellow\"");
        pythonMap.put("scrollbar-color-hover", "widget.styles.scrollbar_color_hover = \"pink\"");
        pythonMap.put("scrollbar-corner-color", "widget.styles.scrollbar_corner_color = \"white\"");
        pythonMap.put("scrollbar-gutter", "self.styles.scrollbar_gutter = \"auto\"    # Don't reserve space for a vertical scrollbar.\r\nself.styles.scrollbar_gutter = \"stable\"  # Reserve space for a vertical scrollbar.");
        pythonMap.put("scrollbar-size", "# Set horizontal scrollbar to 10:\r\nwidget.styles.scrollbar_size_horizontal = 10\r\n# Set vertical scrollbar to 4:\r\nwidget.styles.scrollbar_size_vertical = 4");
        pythonMap.put("scrollbar-visibility", "widget.styles.scrollbar_visibility = \"visible\";\r\nwidget.styles.scrollbar_visibility = \"hidden\";");
        pythonMap.put("text-align", "# Set text in the widget to be right aligned\r\nwidget.styles.text_align = \"right\"");
        pythonMap.put("text-opacity", "# Set the text to be \"half-faded\" against the background of the widget\r\nwidget.styles.text_opacity = \"50%\"");
        pythonMap.put("text-overflow", "widget.styles.text_overflow = \"ellipsis\"");
        pythonMap.put("text-style", "widget.styles.text_style = \"italic\"");
        pythonMap.put("text-wrap", "widget.styles.text_wrap = \"wrap\"\r\nwidget.styles.text_wrap = \"nowrap\"");
        pythonMap.put("tint", "# A red tint\r\nfrom textual.color import Color\r\nwidget.styles.tint = Color.parse(\"red\").with_alpha(0.2);\r\n\r\n# A green tint\r\nwidget.styles.tint = \"rgba(0, 200, 0, 0.3)\"");
        pythonMap.put("visibility", "# Widget is invisible\r\nself.styles.visibility = \"hidden\"\r\n\r\n# Widget is visible\r\nself.styles.visibility = \"visible\"");
        pythonMap.put("width", "widget.styles.width = 10\r\nwidget.styles.width = \"50%\r\nwidget.styles.width = \"auto\"");
        pythonMap.put("-template", "widget.styles.property_name = value1\r\nwidget.styles.property_name = value2\r\nwidget.styles.property_name = (different_syntax_value, shown_here)\r\n\r\nwidget.styles.property_name_variant = value3\r\nwidget.styles.property_name_variant = value4");
        PYTHON_EXAMPLES = Collections.unmodifiableMap(pythonMap);

        // See also (related properties)
        Map<String, List<String>> seeAlsoMap = new LinkedHashMap<>();
        List<String> align_related = new ArrayList<>();
        align_related.add("content-align");
        align_related.add("text-align");
        seeAlsoMap.put("align", align_related);
        List<String> background_related = new ArrayList<>();
        background_related.add("background-tint");
        background_related.add("color");
        seeAlsoMap.put("background", background_related);
        List<String> background_tint_related = new ArrayList<>();
        background_tint_related.add("background");
        background_tint_related.add("color");
        seeAlsoMap.put("background-tint", background_tint_related);
        List<String> border_related = new ArrayList<>();
        border_related.add("box-sizing");
        border_related.add("outline");
        seeAlsoMap.put("border", border_related);
        List<String> box_sizing_related = new ArrayList<>();
        box_sizing_related.add("border");
        box_sizing_related.add("padding");
        seeAlsoMap.put("box-sizing", box_sizing_related);
        List<String> color_related = new ArrayList<>();
        color_related.add("background");
        seeAlsoMap.put("color", color_related);
        List<String> content_align_related = new ArrayList<>();
        content_align_related.add("align");
        content_align_related.add("text-align");
        seeAlsoMap.put("content-align", content_align_related);
        List<String> display_related = new ArrayList<>();
        display_related.add("visibility");
        seeAlsoMap.put("display", display_related);
        List<String> column_span_related = new ArrayList<>();
        column_span_related.add("row-span");
        seeAlsoMap.put("column-span", column_span_related);
        List<String> grid_columns_related = new ArrayList<>();
        grid_columns_related.add("grid-rows");
        seeAlsoMap.put("grid-columns", grid_columns_related);
        List<String> grid_rows_related = new ArrayList<>();
        grid_rows_related.add("grid-columns");
        seeAlsoMap.put("grid-rows", grid_rows_related);
        List<String> row_span_related = new ArrayList<>();
        row_span_related.add("column-span");
        seeAlsoMap.put("row-span", row_span_related);
        List<String> height_related = new ArrayList<>();
        height_related.add("max-height");
        height_related.add("min-height");
        height_related.add("width");
        seeAlsoMap.put("height", height_related);
        List<String> keyline_related = new ArrayList<>();
        keyline_related.add("border");
        seeAlsoMap.put("keyline", keyline_related);
        List<String> layer_related = new ArrayList<>();
        layer_related.add("layers");
        seeAlsoMap.put("layer", layer_related);
        List<String> layers_related = new ArrayList<>();
        layers_related.add("layer");
        seeAlsoMap.put("layers", layers_related);
        List<String> link_background_related = new ArrayList<>();
        link_background_related.add("link-color");
        link_background_related.add("link-background-hover");
        seeAlsoMap.put("link-background", link_background_related);
        List<String> link_background_hover_related = new ArrayList<>();
        link_background_hover_related.add("link-background");
        link_background_hover_related.add("link-color-hover");
        link_background_hover_related.add("link-style-hover");
        seeAlsoMap.put("link-background-hover", link_background_hover_related);
        List<String> link_color_related = new ArrayList<>();
        link_color_related.add("link-background");
        link_color_related.add("link-color-hover");
        seeAlsoMap.put("link-color", link_color_related);
        List<String> link_color_hover_related = new ArrayList<>();
        link_color_hover_related.add("link-color");
        link_color_hover_related.add("link-background-hover");
        link_color_hover_related.add("link-style-hover");
        seeAlsoMap.put("link-color-hover", link_color_hover_related);
        List<String> link_style_related = new ArrayList<>();
        link_style_related.add("link-style-hover");
        link_style_related.add("text-style");
        seeAlsoMap.put("link-style", link_style_related);
        List<String> link_style_hover_related = new ArrayList<>();
        link_style_hover_related.add("link-background-hover");
        link_style_hover_related.add("link-color-hover");
        link_style_hover_related.add("link-style");
        link_style_hover_related.add("text-style");
        seeAlsoMap.put("link-style-hover", link_style_hover_related);
        List<String> margin_related = new ArrayList<>();
        margin_related.add("padding");
        seeAlsoMap.put("margin", margin_related);
        List<String> max_height_related = new ArrayList<>();
        max_height_related.add("min-height");
        max_height_related.add("height");
        seeAlsoMap.put("max-height", max_height_related);
        List<String> max_width_related = new ArrayList<>();
        max_width_related.add("min-width");
        max_width_related.add("width");
        seeAlsoMap.put("max-width", max_width_related);
        List<String> min_height_related = new ArrayList<>();
        min_height_related.add("max-height");
        min_height_related.add("height");
        seeAlsoMap.put("min-height", min_height_related);
        List<String> min_width_related = new ArrayList<>();
        min_width_related.add("max-width");
        min_width_related.add("width");
        seeAlsoMap.put("min-width", min_width_related);
        List<String> opacity_related = new ArrayList<>();
        opacity_related.add("text-opacity");
        seeAlsoMap.put("opacity", opacity_related);
        List<String> outline_related = new ArrayList<>();
        outline_related.add("border");
        seeAlsoMap.put("outline", outline_related);
        List<String> padding_related = new ArrayList<>();
        padding_related.add("box-sizing");
        padding_related.add("margin");
        seeAlsoMap.put("padding", padding_related);
        List<String> scrollbar_background_related = new ArrayList<>();
        scrollbar_background_related.add("scrollbar-background-active");
        scrollbar_background_related.add("scrollbar-background-hover");
        scrollbar_background_related.add("scrollbar-color");
        scrollbar_background_related.add("scrollbar-corner-color");
        seeAlsoMap.put("scrollbar-background", scrollbar_background_related);
        List<String> scrollbar_background_active_related = new ArrayList<>();
        scrollbar_background_active_related.add("scrollbar-background");
        scrollbar_background_active_related.add("scrollbar-background-hover");
        scrollbar_background_active_related.add("scrollbar-color-active");
        seeAlsoMap.put("scrollbar-background-active", scrollbar_background_active_related);
        List<String> scrollbar_background_hover_related = new ArrayList<>();
        scrollbar_background_hover_related.add("scrollbar-background");
        scrollbar_background_hover_related.add("scrollbar-background-active");
        scrollbar_background_hover_related.add("scrollbar-color-hover");
        seeAlsoMap.put("scrollbar-background-hover", scrollbar_background_hover_related);
        List<String> scrollbar_color_related = new ArrayList<>();
        scrollbar_color_related.add("scrollbar-background");
        scrollbar_color_related.add("scrollbar-color-active");
        scrollbar_color_related.add("scrollbar-color-hover");
        scrollbar_color_related.add("scrollbar-corner-color");
        seeAlsoMap.put("scrollbar-color", scrollbar_color_related);
        List<String> scrollbar_color_active_related = new ArrayList<>();
        scrollbar_color_active_related.add("scrollbar-background-active");
        scrollbar_color_active_related.add("scrollbar-color");
        scrollbar_color_active_related.add("scrollbar-color-hover");
        seeAlsoMap.put("scrollbar-color-active", scrollbar_color_active_related);
        List<String> scrollbar_color_hover_related = new ArrayList<>();
        scrollbar_color_hover_related.add("scrollbar-background-hover");
        scrollbar_color_hover_related.add("scrollbar-color");
        scrollbar_color_hover_related.add("scrollbar-color-active");
        seeAlsoMap.put("scrollbar-color-hover", scrollbar_color_hover_related);
        List<String> scrollbar_corner_color_related = new ArrayList<>();
        scrollbar_corner_color_related.add("scrollbar-background");
        scrollbar_corner_color_related.add("scrollbar-color");
        seeAlsoMap.put("scrollbar-corner-color", scrollbar_corner_color_related);
        List<String> text_align_related = new ArrayList<>();
        text_align_related.add("align");
        text_align_related.add("content-align");
        seeAlsoMap.put("text-align", text_align_related);
        List<String> text_opacity_related = new ArrayList<>();
        text_opacity_related.add("opacity");
        seeAlsoMap.put("text-opacity", text_opacity_related);
        List<String> text_overflow_related = new ArrayList<>();
        text_overflow_related.add("text-wrap");
        seeAlsoMap.put("text-overflow", text_overflow_related);
        List<String> text_wrap_related = new ArrayList<>();
        text_wrap_related.add("text-overflow");
        seeAlsoMap.put("text-wrap", text_wrap_related);
        List<String> visibility_related = new ArrayList<>();
        visibility_related.add("display");
        seeAlsoMap.put("visibility", visibility_related);
        List<String> width_related = new ArrayList<>();
        width_related.add("max-width");
        width_related.add("min-width");
        width_related.add("height");
        seeAlsoMap.put("width", width_related);
        SEE_ALSO = Collections.unmodifiableMap(seeAlsoMap);
    }

    private TcssPropertyDocumentation() {
        // Utility class
    }

    /**
     * Gets the description for a specific enum value of a property.
     *
     * @param property the property name (e.g., "display", "text-overflow")
     * @param value the enum value (e.g., "block", "ellipsis")
     * @return the description, or null if not found
     */
    @Nullable
    public static String getEnumValueDescription(@NotNull String property, @NotNull String value) {
        Map<String, String> propertyMap = ENUM_VALUE_DESCRIPTIONS.get(property.toLowerCase(Locale.US));
        return propertyMap != null ? propertyMap.get(value.toLowerCase(Locale.US)) : null;
    }

    /**
     * Gets the syntax for a property.
     *
     * @param property the property name
     * @return the syntax string, or null if not found
     */
    @Nullable
    public static String getSyntax(@NotNull String property) {
        return SYNTAX.get(property.toLowerCase(Locale.US));
    }

    /**
     * Gets CSS examples for a property.
     *
     * @param property the property name
     * @return the CSS examples string, or null if not found
     */
    @Nullable
    public static String getCssExamples(@NotNull String property) {
        return CSS_EXAMPLES.get(property.toLowerCase(Locale.US));
    }

    /**
     * Gets Python examples for a property.
     *
     * @param property the property name
     * @return the Python examples string, or null if not found
     */
    @Nullable
    public static String getPythonExamples(@NotNull String property) {
        return PYTHON_EXAMPLES.get(property.toLowerCase(Locale.US));
    }

    /**
     * Gets related properties (see also) for a property.
     *
     * @param property the property name
     * @return list of related property names, or empty list if none
     */
    @NotNull
    public static List<String> getSeeAlso(@NotNull String property) {
        List<String> related = SEE_ALSO.get(property.toLowerCase(Locale.US));
        return related != null ? related : Collections.emptyList();
    }
}
