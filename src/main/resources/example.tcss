/* Example Textual CSS file */

/* Define some variables */
$primary: #0066cc;
$success: green;
$error: red;
$border-style: wide;

/* Theme variables (add missing definitions) */
$panel: #1e1e1e;
$text: #ffffff;
$background: #0a0a0a;

/* Test variable resolution features */
$base-color: #ff00ff;
$accent: $base-color;  /* Chained variable - should show magenta */
$theme-redef: black;
$theme-redef: white;   /* Last declaration wins - should show white */

/* Circular reference test (should NOT crash) */
$circular1: $circular2;
$circular2: $circular1;

/* Style the main dialog */
#dialog {
    height: 100%;
    margin: 4 8;
    background: $panel;
    color: $text;
    border: tall $background;
    padding: 1 2;
}

/* Button styling */
Button {
    width: 1fr;
    padding: 1 2;
    margin: 1;
    background: $primary;  /* Should show blue gutter icon */
    color: white;
    border: solid $primary;  /* Should show blue gutter icon */
}

/* Test variable references */
.test-variables {
    background: $accent;  /* Should show magenta (chained from $base-color) */
    color: $theme-redef;  /* Should show white (last declaration wins) */
    border: $circular1;   /* Should NOT crash, no icon (circular ref) */
    outline: $undefined-var;  /* Should NOT crash, no icon (undefined) */
}

Button:hover {
    background: $primary-lighten-1;
    text-style: bold;
}

Button:focus {
    border: double $success;
}

/* Class-based styles */
.success {
    background: $success;
    color: white;
}

.error {
    background: $error;
    color: white;
}

.error.disabled {
    background: darkred;
    opacity: 0.5;
}

/* Question dialog with nesting */
#questions {
    border: heavy $primary;
    align: center middle;
    width: 80%;
    height: auto;
    
    /* Nested styles */
    .question {
        text-style: bold;
        height: 100%;
        content-align: center middle;
    }
    
    .buttons {
        width: 100%;
        height: auto;
        dock: bottom;
        
        Button {
            width: 1fr;
            
            &.affirmative {
                border: heavy $success;
                background: $success;
            }
            
            &.negative {
                border: heavy $error;
                background: $error;
            }
        }
    }
}

/* Grid layout */
.grid-container {
    layout: grid;
    grid-size: 3 2;
    grid-columns: 1fr 2fr 1fr;
    grid-rows: auto auto;
    grid-gutter: 1 2;
}

/* Scrollbar styling */
/* Note: Textual CSS doesn't support ::-webkit-scrollbar pseudo-element */
/* Use direct scrollbar properties instead */
* {
    scrollbar-size: 1 1;
    scrollbar-background: $background;
    scrollbar-color: $primary;
}

/* Opacity suffix tests */
.opacity-tests {
    /* Named color with opacity */
    background: red 50%;         /* Should show semi-transparent red gutter icon */
    color: blue 25%;             /* Should show very transparent blue */
    border: green 80%;           /* Should show mostly opaque green */

    /* Hex color with opacity */
    outline: #ff0000 60%;        /* Should show semi-transparent red */
    text-style: #0066cc 40%;     /* Should show transparent blue */

    /* Variable with opacity */
    scrollbar-color: $primary 70%;   /* Should resolve variable then apply opacity */
    scrollbar-background: $success 30%;  /* Should show transparent green */
}

/* RGB/HSL function calls with opacity */
.function-opacity {
    background: rgb(255, 0, 0) 50%;      /* RGB red with opacity */
    color: hsl(240, 100%, 50%) 75%;      /* HSL blue with opacity */
}

/* Responsive styles */
/* Note: Textual CSS doesn't support @media queries (terminal UI, not web) */
/* For conditional styling, use theme variables and pseudo-classes like :dark/:light */
